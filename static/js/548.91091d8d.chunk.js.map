{"version":3,"file":"static/js/548.91091d8d.chunk.js","mappings":"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","sources":["components/MoviesItem/moviesItem.module.css","components/MoviesItem/MoviesItem.jsx","../node_modules/nanoid/index.browser.js","pages/SingleMoviePage/SingleMoviePage.module.css","pages/SingleMoviePage/SingleMoviePage.jsx","shared/api/services.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { nanoid } from \"nanoid\";\nimport PropTypes from \"prop-types\";\nimport s from \"./moviesItem.module.css\"\n\nconst MoviesItem = ({ item }) => {\n    const {\n        poster_path,\n        overview,\n        title,\n        vote_average,\n        release_date,\n        genres, } = item;\n    \n    const genresItem = genres.map(item => (\n        <li key={nanoid()}>{item.name}</li>\n    ));\n    const releaseDate = release_date.slice(0, 4)\n    const voteAverage = (vote_average * 10).toFixed(0);\n    \n    return (\n        <div className={s.container}>\n            <img\n                className={s.img}\n                src={`https://image.tmdb.org/t/p/original${poster_path}`}\n                alt={title}\n                width=\"300\"\n                height=\"400\"\n            />\n            <div >\n                <h2>{`${title} (${releaseDate})`}</h2>\n            <p>\n              USER SCORE: <span className={s.text}>{voteAverage}%</span>\n            </p>\n            <p>\n              OVERVIEW: <span className={s.text}>{overview}</span>\n            </p>\n            <p>GENRES:</p>\n            <ul className={s.list}>\n                {genresItem}\n            </ul>\n            </div>\n        </div>\n    )\n}\n\nMoviesItem.defaultProps = {\n  item: [],\n};\n\nMoviesItem.propTypes = {\n    item: PropTypes.shape({\n        poster_path: PropTypes.string.isRequired,\n        overview: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n        release_date: PropTypes.string.isRequired,\n        genres: PropTypes.arrayOf(\n            PropTypes.shape({\n                name: PropTypes.string.isRequired,\n            })\n        ),\n    }),\n};\nexport default MoviesItem;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from \"react\";\nimport { useParams, NavLink, Outlet, Link, useLocation } from \"react-router-dom\";\nimport MoviesItem from '../../components/MoviesItem';\n\nimport { getMovieById } from '../../shared/api/services';\nimport s from './SingleMoviePage.module.css';\n\nconst SingleMoviePage = () => {\n    \n    const [state, setState] = useState({\n        movie: {},\n        loading: false,\n        error: null,\n    });\n\n    const { movie, loading, error } = state;\n\n\n    const { id: StrId } = useParams();\n  const id = Number(StrId);\n\n    const location = useLocation();\n\n     const goBack = location?.state?.from ?? '/';\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            setState(p => ({\n                ...p,\n                loading: true,\n            }))\n\n            try {\n                const movieEl = await getMovieById(id);\n                setState((p) => {\n          return { ...p, loading: false, movie: { ...movieEl } };\n        });\n            } catch (error) {\n                setState(p => ({\n                    ...p,\n                    loading: false,\n                    error,\n                \n                }))\n            }\n        }\n        if (id) {\n      fetchMovies()\n    }\n        \n    }, [id]);\n\n    const getActiveLink = ({isActive}) => {\n    return isActive ? s.itemActive : s.item;\n}\n\n    \n    const isMovie = Object.keys(movie).length > 0;\n    return (\n        <>\n            <div className={s.container}>\n                <Link className={s.button} to={goBack}>\n                    Go back\n                </Link>\n            \n                {loading && <p>...Loading</p>}\n                {error && <p>Movie not found</p>}\n                {isMovie && <MoviesItem item={movie} />}\n                {isMovie && <NavLink className={getActiveLink} to={`cast`} state={{ from: goBack }}>Cast</NavLink>}\n                {isMovie && <NavLink className={getActiveLink} to={`reviews`} state={{ from: goBack }}>Reviews</NavLink>}\n                \n            </div>\n            <Outlet />\n        </>\n    );\n}\n\nexport default SingleMoviePage;","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n});\nconst API_KEY = \"1f739ee3b0896acaf022f176c2ecab80\";\n\nexport const getTrendingMovies = async (page = 1) => {\n    const {\n        data: { results },\n    } = await instance.get(\"trending/movie/day\", {\n        params: {\n            api_key: API_KEY,\n            page,\n        },\n    })\n    return results;\n};\n\nexport const getMovieById = async (id) => {\n    const { data } = await instance.get(`movie/${id}`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n    return data\n};\n\nexport const searchMovies = async (query, page = 1) => {\n    const { data } = await instance.get('search/movie', {\n        params: {\n            api_key: API_KEY,\n            page,\n            query,\n        },\n    });\n    return data;\n}\n\nexport const getMovieCredits = async (id) => {\n    const { data } = await instance.get(`movie/${id}/credits`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n    return data.cast;\n}\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await instance.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data.results;\n};\n"],"names":["MoviesItem","item","poster_path","overview","title","vote_average","release_date","genresItem","genres","map","name","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","releaseDate","slice","voteAverage","toFixed","className","s","src","alt","width","height","defaultProps","useState","movie","loading","error","state","setState","StrId","useParams","Number","location","useLocation","goBack","from","useEffect","fetchMovies","p","getMovieById","movieEl","getActiveLink","isActive","isMovie","Object","keys","length","to","instance","axios","baseURL","API_KEY","getTrendingMovies","page","get","params","api_key","results","data","searchMovies","query"],"sourceRoot":""}